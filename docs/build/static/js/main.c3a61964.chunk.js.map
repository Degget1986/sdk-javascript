{"version":3,"sources":["assets/svg/arrow_right.svg","assets/svg/amb_logo.svg","assets/svg/link.svg","app/containers/Introduction/Introduction.tsx","app/components/Table/Table.tsx","app/containers/GettingStarted/GettingStarted.tsx","app/containers/Examples/Assets/Assets.tsx","app/containers/Examples/Events/Events.tsx","app/containers/Examples/Transactions/Transactions.tsx","app/containers/Examples/Blockchain/Blockchain.tsx","app/containers/Examples/Examples.tsx","app/components/Navigation/Navigation.tsx","app/components/Aside/Aside.tsx","app/components/Header/Header.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Introduction","setHash","useContext","AppContext","intro","useRef","useEffect","window","addEventListener","onScroll","removeEventListener","e","preventDefault","Math","abs","scrollY","current","offsetTop","react_default","a","createElement","id","ref","react_svg","wrapper","className","src","amb_logo","lib_default","text","concat","location","origin","link","Table","props","head","map","item","index","key","body","row","cell","i","GettingStarted","started","prerequisite","installation","usage","Prism","highlightAll","target","href","Assets","assets","getAsset","getAssets","createAsset","style","listStyleType","paddingLeft","paddingBottom","Events","events","getEvent","getEvents","createEvent","Transactions","transaction","getTransaction","getTransactionReceipt","getTransactionCount","sendTransaction","Blockchain","blockchain","pkPair","balance","block","latestBlock","blockAccount","Examples","example","Navigation","value","isActive","path","indexOf","hash","el","scrollIntoView","behavior","react_router_hash_link_lib","scroll","to","rightArrow","Aside_Aside","components_Navigation_Navigation","Header_Header","dist","createContext","App","_useState","useState","_useState2","Object","slicedToArray","Provider","hashValue","history","pushState","containers_Introduction_Introduction","containers_GettingStarted_GettingStarted","containers_Examples_Examples","Boolean","hostname","match","ReactDOM","render","BrowserRouter","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3a61964.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow_right.0eac07d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/amb_logo.aa917ec9.svg\";","module.exports = __webpack_public_path__ + \"static/media/link.12cd88cc.svg\";","import React, { useRef, useContext, useEffect } from 'react';\nimport { AppContext } from '../../App';\nimport amb_logo from '../../../assets/svg/amb_logo.svg';\nimport SVG from 'react-svg';\nimport './Introduction.scss';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport link from '../../../assets/svg/link.svg';\n\nconst Introduction = () => {\n  const { setHash } = useContext(AppContext);\n  const intro = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n\n  const onScroll = (e: any) => {\n    e.preventDefault();\n    if (Math.abs(window.scrollY - intro.current!.offsetTop) <= 30) {\n      setHash('intro');\n    }\n  };\n\n  return (\n    <div id='intro' ref={intro}>\n      <SVG wrapper='div' className='logo' src={amb_logo} />\n      <h2>\n        <CopyToClipboard text={`${window.location.origin}/#intro`}>\n          <SVG className='link' src={link} wrapper='span' />\n        </CopyToClipboard>\n        Ambrosus SDK</h2>\n      <hr />\n      <div className='para'>\n        <p>The purpose of this document is to provide an overview and breakdown of how to utilize the Ambrosus JavaScript SDK to interact with and build solutions on the Ambrosus Network (AMB-NET). In the context of the Ambrosus Ecosystem, the Ambrosus JavaScript SDK provides a clear and easily digestible introduction to sending or pulling data from the Ambrosus blockchain using JavaScript. More specifically, it allows any interested developer to build (decentralised) applications, as well as create and manage ‘Assets’ and ‘Events’ on the Ambrosus Network (AMB-NET).</p><br />\n        <p>The document proceeds as follows: <br /><br />First, information is provided with regards to setting up the JavaScript SDK and creating an ‘Account’ on the Ambrosus Network. This section discusses how to create a private key, as well as what expected ‘response’ mechanisms from the SDK entail. <br /><br />Second, the core data model of the Ambrosus Network, is explained. This involves a breakdown of the fundamental objects within the Ambrosus Ecosystem: Assets and Events. Further information is also provided concerning how to create Assets and Events using the JavaScript SDK. <br /><br />Third, the document details how to pull Assets and Events stored on the Ambrosus blockchain via Hermes Masternodes; this in particular allows JavaScript developers to easily and quickly build custom applications on the Ambrosus Network. </p>\n\n        </div>\n    </div>);\n};\n\nexport default Introduction;\n","import React from 'react';\n\nexport default function (props: any) {\n    return (\n        <div className='table-wrapper'>\n            <table>\n                <thead>\n                    <tr>\n                        {props.head.map((item: any, index: number) => <th key={index}>{item}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.body.map((row: any, index: number) => (\n                        <tr key={index}>\n                            {row.map((cell: any, i: number) => <td key={i}>{cell}</td>)}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import React, { useRef, useContext, useEffect } from 'react';\nimport { AppContext } from '../../App';\nimport SVG from 'react-svg';\nimport './GettingStarted.scss';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport link from '../../../assets/svg/link.svg';\nimport Prism from 'prismjs';\nimport Table from '../../components/Table';\n\nconst GettingStarted = () => {\n    const {setHash} = useContext(AppContext);\n    const started = useRef<HTMLDivElement>(null);\n    const prerequisite = useRef<HTMLDivElement>(null);\n    const installation = useRef<HTMLDivElement>(null);\n    const usage = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        Prism.highlightAll();\n        window.addEventListener('scroll', onScroll);\n        return () => {\n          window.removeEventListener('scroll', onScroll);\n        };\n      }, []);\n\n      const onScroll = (e: any) => {\n        e.preventDefault();\n        if (Math.abs(window.scrollY - started.current!.offsetTop) <= 30 ) {\n            setHash('started');\n        } else if (Math.abs(window.scrollY - prerequisite.current!.offsetTop) <= 30 ) {\n          setHash('prerequisite');\n        } else if (Math.abs(window.scrollY - installation.current!.offsetTop) <= 30 ) {\n          setHash('installation');\n        } else if (Math.abs(window.scrollY - usage.current!.offsetTop) <= 30 ) {\n          setHash('usage');\n        }\n      };\n\n    return (\n    <div id='started' ref={started}>\n        <h2>\n          <CopyToClipboard text={`${window.location.origin}/#started`}>\n            <SVG className='link' src={link} wrapper='span' />\n          </CopyToClipboard>\n        Getting Started</h2>\n        <hr /><br />\n        <div id='prerequisite' ref={prerequisite}>\n          <h3>\n            <CopyToClipboard text={`${window.location.origin}/#prerequisite`}>\n              <SVG className='link' src={link} wrapper='span' />\n            </CopyToClipboard>\n            Prerequisite\n          </h3>\n            <div className='para'>\n              <p>In order to use Ambrosus SDK, first you need to have a developers account.\n              You can <a target='_blank' href='https://selfservice-test.ambrosus.com/create'>apply for one here.</a><br /><br />\n              Ambrosus team will send you an email with your account <strong>address</strong> and <strong>secret</strong> key.<br /><br />\n              <strong>Important note:</strong> PLEASE DO NOT SHARE YOUR SECRET WITH ANYONE.<br />\n              We do not store your secret for security reasons, so please save it somewhere safe, in order to use it in SDK.<br /><br />\n              <i>To use Ambrosus SDK, you will need your <strong>address</strong> and <strong>secret</strong>.</i>\n              Now we can go to setup.</p>\n            </div>\n        </div>\n        <div id='installation' ref={installation}>\n          <h3>\n            <CopyToClipboard text={`${window.location.origin}/#installation`}>\n              <SVG className='link' src={link} wrapper='span' />\n            </CopyToClipboard>\n            Installation\n           </h3>\n          <div className='para'>\n            npm\n            <pre>\n              <code className='language-bash'>\n  {`$ npm install ambrosus-javascript-sdk --save`}\n              </code>\n            </pre>\n          </div>\n        </div>\n        <div id='usage' ref={usage}>\n          <h3>\n            <CopyToClipboard text={`${window.location.origin}/#usage`}>\n              <SVG className='link' src={link} wrapper='span' />\n            </CopyToClipboard>\n            Usage\n           </h3>\n           <div className='para'>\n           Import the SDK in your javascript file<br />\n            <pre>\n              <code className='language-javascript line-numbers'>\n{`// with the classic require...\nconst AmbrosusSDK = require('ambrosus-javascript-sdk')\n// ... or with the new import directive.\nimport AmbrosusSDK from 'ambrosus-javascript-sdk'`}\n              </code>\n            </pre>\n            <br />\n            <p>Initializing the Ambrosus library. The following properties can be passed while initializing the library.<br /> The ideal way to pass the properties is using the environment variables.</p>\n            <Table\n              head={['Property', 'Type', 'Defination', 'Example']}\n              body={[\n                ['rpcURL', 'string', 'RPC URL of the blockchain network.', 'https://network.ambrosus-dev.com'],\n                ['secret', 'string', 'Secret key you received in email.', '0x34353sdgdsHd...'],\n                ['apiEndpoint', 'string', 'API endpoint of the ambrosus network.', 'https://hermes.ambrosus-test.com'],\n              ]} />\n            <br />\n            Intializing SDK to request or querying data.\n            <pre>\n              <code className='language-javascript line-numbers'>\n{`const ambrosus = new AmbrosusSDK({\n  apiEndpoint: 'https://hermes.ambrosus-test.com',\n});`}\n              </code>\n            </pre>\n            Initializing SDK to create assets and events.\n            <pre>\n              <code className='language-javascript line-numbers'>\n{`const ambrosus = new AmbrosusSDK({\n  secret: '0x6823520c03ad7b17....',\n  apiEndpoint: 'https://hermes.ambrosus-test.com',\n});`}\n              </code>\n            </pre>\n            Initializing SDK to work with the blockchain network.\n            <pre>\n              <code className='language-javascript line-numbers'>\n{`const ambrosus = new AmbrosusSDK({\n  rpcURL: 'https://network.ambrosus-dev.com',\n  secret: '0x6823520c03ad7b17....',\n});`}\n              </code>\n            </pre>\n           </div>\n        </div>\n    </div>);\n};\n\nexport default GettingStarted;\n","import React, { useRef, useEffect, useContext } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport SVG from 'react-svg';\nimport link from '../../../../assets/svg/link.svg';\nimport Prism from 'prismjs';\nimport { AppContext } from '../../../App';\nimport Table from '../../../components/Table';\n\nexport default function () {\n    const assets = useRef<HTMLDivElement>(null);\n    const getAsset = useRef<HTMLDivElement>(null);\n    const getAssets = useRef<HTMLDivElement>(null);\n    const createAsset = useRef<HTMLDivElement>(null);\n    const { setHash } = useContext(AppContext);\n\n    useEffect(() => {\n        Prism.highlightAll();\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    const onScroll = (e: any) => {\n        if (Math.abs(window.scrollY - assets.current!.offsetTop) <= 30) {\n            setHash('assets');\n        } else if (Math.abs(window.scrollY - getAsset.current!.offsetTop) <= 30) {\n            setHash('get-asset');\n        } else if (Math.abs(window.scrollY - getAssets.current!.offsetTop) <= 30) {\n            setHash('get-assets');\n        } else if (Math.abs(window.scrollY - createAsset.current!.offsetTop) <= 30) {\n            setHash('create-asset');\n        }\n    };\n\n    return (\n        <div id='assets' ref={assets}>\n            <h3>\n                <CopyToClipboard text={`${window.location.origin}/#assets`}>\n                    <SVG className='link' src={link} wrapper='span' />\n                </CopyToClipboard>\n                Assets</h3><br />\n            <div className='para'>\n                <p>Assets are the primary objects of analysis being monitored or traced over time; a stationary water sensor, a logistics pallet, a crate of milk, a steak, etc. As the ‘nouns’ of the system, Assets can represent an ingredient, product, package of products or any other type of container.\nImportantly, an Asset functions as a handle of Events and possesses an <i>idData</i> structure containing the following pieces of information: </p><br />\n                <ul style={{ listStyleType: 'disc', paddingLeft: '30px' }}>\n                    <li>The AMB-ID of the Asset </li>\n                    <li>User Address</li>\n                    <li>Minimal Access Level Required to View the Private Data </li>\n                    <li>Timestamp </li>\n                    <li>Hash of the Data Field </li>\n                </ul>\n            </div>\n            <div id='get-asset' ref={getAsset} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Asset</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    Returns asset with respect to the assetId provided.\n                <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination', 'Example']}\n                        body={[\n                            ['assetId', 'required', 'string', 'Asset\\'s ID', '0xc0cdb3f2b81d928369de4143cdb1a20e5ecdec09e0ea123dd828bdcc55a048db'],\n                        ]} />\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n});\nambrosus.assets.getAssetById(assetId).then(function(response) {\n    // Successful request\n    console.log(response);\n}).catch(function(error) {\n    // Catching the error\n    console.log(error);\n);\n`}\n                        </code>\n                    </pre>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n    \"status\": 200,\n    \"data\": {\n        \"assetId\": \"0xc5cfd04.....30755ed65\",\n        \"content\": {\n            \"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n            \"idData\": {\n                \"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n                \"timestamp\": 1503424923,\n                \"sequenceNumber\": 3\n            }\n        },\n        \"metadata\": {\n            \"bundleId\": \"0x85a427a3.....cd1d38ebbd\",\n            \"bundleTransactionHash\": \"0x21ab....1cdf8e55b37\"\n        }\n    },\n    \"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    Error example for GET asset. Reasons:\n                <ol style={{ paddingLeft: '20px' }}>\n                        <li>If in the setup, address and secret are incorrect.</li>\n                        <li>If assetID doesn't exist.</li>\n                        <li>If you don't have permission to access the asset.</li>\n                    </ol>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n    \"status\": 404,\n    \"data\": null,\n    \"message\": \"No asset with such assetId found\"\n}`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={getAssets} id='get-assets' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Assets</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Returns array of assets.</p>\n                    <p>For this method you can apply certain filters, to get ie. first 20 assets.</p>\n                    <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination', 'Example']}\n                        body={[\n                            ['perPage', 'optional', 'number', 'Number of assets to return per page', '20'],\n                            ['createdBy', 'optional', 'string', 'Address of the user', '0x9687a70513047dc6Ee966D69bD0C07FFb1102098'],\n                        ]} />\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n});\n\nconst params = {\n    perPage: 1\n};\nambrosus.assets.getAssets(params).then(function(response) {\n    // Successful request\n    console.log(response);\n}).catch(function(error) {\n    // Catching the error\n    console.log(error);\n);\n`}\n                        </code>\n                    </pre>\n                    <p>Response example</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n    \"status\": 200,\n    \"data\": {\n        \"results\": [{\n            \"assetId\": \"0xc5cfd04.....30755ed65\",\n            \"content\": {\n                \"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n                \"idData\": {\n                    \"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n                    \"timestamp\": 1503424923,\n                    \"sequenceNumber\": 3\n                }\n            },\n            \"metadata\": {\n                \"bundleId\": \"0x85a427a3.....cd1d38ebbd\",\n                \"bundleTransactionHash\": \"0x21ab....1cdf8e55b37\"\n            }\n        }],\n        \"resultCount\": 53\n    },\n    \"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    <p>Error example for GET assets.</p>\n                    <p>In this case, if you don't have any assets, you will receive status of 200, but in the data, data.results will be empty array, as well as data.resultCount will be 0.</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n    \"status\": 200,\n    \"data\": {\n      \"results\": [],\n      \"resultCount\": 0\n    },\n    \"message\": \"\"\n  }`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={createAsset} id='create-asset' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Create Assets</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Creating a new Asset</p>\n                    <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination']}\n                        body={[\n                            ['assetData', 'required', 'object', 'Asset data information'],\n                        ]}\n                    />\n                    <br />\n                    <p>Example for Asset Data</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`[{\n    \"content\": {\n        \"idData\": {\n            \"timestamp\": 1519817101\n        },\n        \"data\": [{\n            \"type\": \"ambrosus.asset.info\",\n            \"name\": \"PURE DARK CHOCOLATE BAR 92%\",\n            ...,\n        }]\n    }\n}]`}\n                        </code>\n                    </pre>\n                    <p>\n                        This will first create an asset in the background of SDK, then on success it will create a first following event. It's important that event type ends with .info, all other information in example above is customizable.\n                        </p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n    secret: '0x6823520c03ad7b17....',\n});\nambrosus.assets.createAsset(assetData).then(function(response) {\n    // Successful request\n    console.log(response);\n}).catch(function(error) {\n    // Catching the error\n    console.log(error);\n);\n`}\n                        </code>\n                    </pre>\n                    <p>Response Example</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n\t\"status\": 200,\n\t\"data\": {\n\t\t\"assetId\": \"0xc5cfd04.....30755ed65\",\n\t\t\"content\": {\n\t\t\t\"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n\t\t\t\"idData\": {\n\t\t\t\t\"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n\t\t\t\t\"timestamp\": 1503424923,\n\t\t\t\t\"sequenceNumber\": 3\n\t\t\t}\n\t\t}\n\t},\n\t\"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    <p>Error example for CREATE asset. Reasons:</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`// If in the setup, secret is incorrect.\n{\n    \"status\": 400 or 403,\n    \"data\": null,\n    \"message\": \"Invalid input\" or \"The createdBy user is not registered or has no \"create_entity\" permission\"\n}`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n        </div>);\n}\n","import React, { useRef, useEffect, useContext } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport SVG from 'react-svg';\nimport link from '../../../../assets/svg/link.svg';\nimport Prism from 'prismjs';\nimport { AppContext } from '../../../App';\nimport Table from '../../../components/Table';\nexport default function () {\n    const events = useRef<HTMLDivElement>(null);\n    const getEvent = useRef<HTMLDivElement>(null);\n    const getEvents = useRef<HTMLDivElement>(null);\n    const createEvent = useRef<HTMLDivElement>(null);\n    const { setHash } = useContext(AppContext);\n\n    useEffect(() => {\n        Prism.highlightAll();\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    const onScroll = (e: any) => {\n        if (Math.abs(window.scrollY - events.current!.offsetTop) <= 30) {\n            setHash('events');\n        } else if (Math.abs(window.scrollY - getEvent.current!.offsetTop) <= 30) {\n            setHash('get-event');\n        } else if (Math.abs(window.scrollY - getEvents.current!.offsetTop) <= 30) {\n            setHash('get-events');\n        } else if (Math.abs(window.scrollY - createEvent.current!.offsetTop) <= 30) {\n            setHash('create-event');\n        }\n    };\n\n    return (\n        <div id='events' ref={events}>\n            <h3>\n                <CopyToClipboard text={`${window.location.origin}/#assets`}>\n                    <SVG className='link' src={link} wrapper='span' />\n                </CopyToClipboard>\n                Events</h3><br />\n            <div className='para'>\n                <p>\n                    Events are registries of any change of state that has occurred to an Asset; the temperature, humidity, location, acceleration, quality check, etc. When registered in AMB-NET, an event will always contain the following array of JSON objects:\n                </p><br />\n                <ul style={{ listStyleType: 'disc', paddingLeft: '30px' }}>\n                    <li>WHAT (relating to the AMB-ID of the Asset in Question)</li>\n                    <li>WHERE (the location of where the Event was taken from based upon latitude or longitude coordinates or GLN). </li>\n                    <li>WHO (the device, application, or user that created the Event in question). </li>\n                    <li>WHEN (a timestamp of the Event indicating when it was originally created). </li>\n                    <li>WHY (indicating the business procedure and its purpose).</li>\n                </ul>\n            </div>\n            <div id='get-event' ref={getEvent} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Event</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Returns the data of a specific event.</p>\n                    <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination', 'Example']}\n                        body={[\n                            ['eventId', 'required', 'string', 'Event\\'s ID', '0xc0cdb3f2b81d928369de4143cdb1a20e5ecdec09e0ea123dd828bdcc55a048db'],\n                        ]}\n                    />\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n});\nambrosus.events.getEventById(eventId).then(function(response) {\n    // Response if successful\n    console.log(response);\n  }).catch(function(error) {\n    // Error if error\n    console.log(error);\n  );\n`}\n                        </code>\n                    </pre>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n\t\"status\": 200,\n\t\"data\": {\n\t\t\"eventId\": \"0xc5cfd04.....30755ed65\",\n\t\t\"content\": {\n\t\t\t\"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n\t\t\t\"idData\": {\n\t\t\t\t\"assetId\": \"0xc5cfd04.....30755ed65\",\n\t\t\t\t\"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n\t\t\t\t\"accessLevel\": 4,\n\t\t\t\t\"timestamp\": 1503424923,\n\t\t\t\t\"dataHash\": \"0x01cd181cd38eb5bbd162a44701727a31f457a538\"\n\t\t\t},\n\t\t\t\"data\": [{\n\t\t\t\t\"type\": \"ambrosus.event.customevent\",\n\t\t\t\t\"customField\": \"customValue\"\n\t\t\t}]\n\t\t}\n\t},\n\t\"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    <p>Error example for GET event. Reasons:</p>\n                    <ol style={{ paddingLeft: '20px' }}>\n                        <li>If event with eventId doesn't exist.</li>\n                    </ol>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n  \"status\": 404,\n  \"data\": null,\n  \"message\": \"Event not found\"\n}`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={getEvents} id='get-events' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Events</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Returns array of events.</p>\n                    <p>For this method you can apply certain filters, to get ie. all events for a specific assetId.</p>\n                    <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination', 'Example']}\n                        body={[\n                            ['assetId', 'optional', 'string', 'Event\\'s ID', '0xc0cdb3f2b81d928369de4143cdb1a20e5ecdec09e0ea123dd828bdcc55a048db'],\n                            ['fromTimestamp', 'optional', 'number', 'Earliest timestamp (date in seconds)', '1503424923'],\n                            ['toTimestamp', 'optional', 'number', 'Latest timestamp (date in seconds)', '1503424923'],\n                            ['data', 'optional', 'string', 'Filter events by object properties in event.content.data array', 'data[type]=ambrosus.event.info'],\n                            ['perPage', 'optional', 'number', 'Number of events to return per page', '20'],\n                        ]}\n                    />\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n});\n\nconst options = {\n\t\"assetId\": \"0xc0cdb3f2b81d928369de4143cdb1a20e5ecdec09e0ea123dd828bdcc55a048db\",\n\t\"fromTimestamp\": 1503424723,\n\t\"toTimestamp\": 1503424923,\n\t\"perPage\": 5,\n\t\"data\": \"data[type]=ambrosus.event.info\"\n}\nambrosus.events.getEvents(options).then(function(response) {\n    // Successful request\n    console.log(response);\n}).catch(function(error) {\n    // Catching the error\n    console.log(error);\n);\n`}\n                        </code>\n                    </pre>\n                    <p>Response example</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n\t\"status\": 200,\n\t\"data\": {\n\t\t\"results\": [{\n\t\t\t\"eventId\": \"0xc5cfd04.....30755ed65\",\n\t\t\t\"content\": {\n\t\t\t\t\"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n\t\t\t\t\"idData\": {\n\t\t\t\t\t\"assetId\": \"0xc5cfd04.....30755ed65\",\n\t\t\t\t\t\"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n\t\t\t\t\t\"timestamp\": 1503424923,\n\t\t\t\t\t\"dataHash\": \"0x01cd181cd38eb5bbd162a44701727a31f457a538\"\n\t\t\t\t},\n\t\t\t\t\"data\": [{\n\t\t\t\t\t\"type\": \"ambrosus.event.customevent\",\n\t\t\t\t\t\"customField\": \"customValue\"\n\t\t\t\t}]\n\t\t\t}\n\t\t}],\n\t\t\"resultCount\": 112\n\t},\n\t\"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    <p>Error example for GET events.</p>\n                    <p>In this case, if you don't provide any options</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n  \"status\": 404,\n  \"data\": null,\n  \"message\": \"Event not found\"\n}`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={createEvent} id='create-event' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-asset`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Create Event</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Creating a new Asset</p>\n\n                    <Table\n                        head={['Parameter', 'Requirement', 'Type', 'Defination', 'Example']}\n                        body={[\n                            ['assetId', 'required', 'string', 'Asset\\'s ID', '0xc0cdb3f2b81d928369de4143cdb1a20e5ecdec09e0ea123dd828bdcc55a048db'],\n                            ['eventData', 'required', 'object', 'Event data information', 'Example below'],\n                        ]}\n                    />\n                    <br />\n                    <p>Example for Asset Data</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {` [{\n \t\"type\": \"ambrosus.asset.info\",\n \t\"name\": \"PURE DARK CHOCOLATE BAR 92%\",\n \t\"assetType\": \"ambrosus.assetTypes.batch\",\n \t\"images\": {\n \t\t\"default\": {\n \t\t\t\"url\": \"http://imageurlgoeshere.com/file.extension\"\n \t\t}\n \t},\n \t\"size\": \"2.64 oz.\",\n \t\"Product Information\": {\n \t\t\"attributes\": \"No-GMOs, Vegan, Gluten Free, Kosher, Soy Free\",\n \t\t\"ingredients\": \"Organic cocoa beans, organic sugar, organic cocoa butter\",\n \t\t\"Brand\": \"Madecasse\"\n \t},\n \t\"Batch Information\": {\n \t\t\"Origin\": \"Madagascar\"\n \t}\n }]`}\n                        </code>\n                    </pre>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    apiEndpoint: 'https://hermes.ambrosus-test.com',\n    secret: '0x6823520c03ad7b17....',\n});\nambrosus.events.createEvent(assetId, eventData).then(function(response) {\n    // Successful request\n    console.log(response);\n}).catch(function(error) {\n    // Catching the error\n    console.log(error);\n);\n`}\n                        </code>\n                    </pre>\n                    <p>Response Example</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`{\n\t\"status\": 200,\n\t\"data\": {\n\t\t\"eventId\": \"0xc5cfd04.....30755ed65\",\n\t\t\"content\": {\n\t\t\t\"signature\": \"0x30755ed65396facf86c53e6...65c5cfd04be400\",\n\t\t\t\"idData\": {\n\t\t\t\t\"assetId\": \"0xc5cfd04.....30755ed65\",\n\t\t\t\t\"createdBy\": \"0x162a44701727a31f457a53801cd181cd38eb5bbd\",\n\t\t\t\t\"accessLevel\": 4,\n\t\t\t\t\"timestamp\": 1503424923,\n\t\t\t\t\"dataHash\": \"0x01cd181cd38eb5bbd162a44701727a31f457a538\"\n\t\t\t},\n\t\t\t\"data\": [{\n\t\t\t\t\"type\": \"ambrosus.event.customevent\",\n\t\t\t\t\"customField\": \"customValue\"\n\t\t\t}]\n\t\t}\n\t},\n\t\"message\": \"success\"\n}`}\n                        </code>\n                    </pre>\n                    <p>Error example for CREATE event. Reasons:</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`// If in the setup, secret is incorrect.\n{\n    \"status\": 400 or 403,\n    \"data\": null,\n    \"message\": \"Invalid input\" or \"The createdBy user is not registered or has no \"create_entity\" permission\"\n}`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n        </div>);\n}\n","import React, { useEffect, useRef, useContext } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport SVG from 'react-svg';\nimport link from '../../../../assets/svg/link.svg';\nimport Prism from 'prismjs';\nimport { AppContext } from '../../../App';\n\nexport default function () {\n    const { setHash } = useContext(AppContext);\n    const transaction = useRef<HTMLDivElement>(null);\n    const getTransaction = useRef<HTMLDivElement>(null);\n    const getTransactionReceipt = useRef<HTMLDivElement>(null);\n    const getTransactionCount = useRef<HTMLDivElement>(null);\n    const sendTransaction = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        Prism.highlightAll();\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    const onScroll = (e: any) => {\n        if (Math.abs(window.scrollY - transaction.current!.offsetTop) <= 30) {\n            setHash('transaction');\n        } else if (Math.abs(window.scrollY - getTransaction.current!.offsetTop) <= 30) {\n            setHash('get-transaction');\n        } else if (Math.abs(window.scrollY - getTransactionReceipt.current!.offsetTop) <= 30) {\n            setHash('get-transaction-receipt');\n        } else if (Math.abs(window.scrollY - getTransactionCount.current!.offsetTop) <= 30) {\n            setHash('get-transaction-count');\n        } else if (Math.abs(window.scrollY - sendTransaction.current!.offsetTop) <= 30) {\n            setHash('send-transaction');\n        }\n    };\n\n    return (\n        <div id='transaction' ref={transaction}>\n            <h3>\n                <CopyToClipboard text={`${window.location.origin}/#transaction`}>\n                    <SVG className='link' src={link} wrapper='span' />\n                </CopyToClipboard>\n                Transaction</h3><hr />\n            <div id='get-transaction' ref={getTransaction} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-transaction`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Transaction</h4>\n                    <div style={{ paddingBottom: '0' }} className='para'>\n                        Returns a transaction matching the given transaction hash.\n                        <pre>\n                            <code className='language-javascript line-numbers'>\n                                {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst transactionHash = '...';\nambrosus.service.getTransaction(transactionHash)\n.then(console.log);`}\n                            </code>\n                        </pre>\n                    </div>\n            </div>\n            <div id='get-transaction-receipt' ref={getTransactionReceipt} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-transaction-receipt`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Transaction Receipt</h4>\n                    <div style={{ paddingBottom: '0' }} className='para'>\n                        <p>Returns the transaction recepit.</p>\n                        <p>The receipt is not available for pending transactions and returns null.</p>\n                        <pre>\n                            <code className='language-javascript line-numbers'>\n                                {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst transactionHash = '...';\nambrosus.service.getTransactionRecepit(transactionHash)\n.then(console.log);`}\n                            </code>\n                        </pre>\n                    </div>\n            </div>\n            <div id='get-transaction-count' ref={getTransactionCount} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#get-transaction-count`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Transaction Count</h4>\n                    <div style={{ paddingBottom: '0' }} className='para'>\n                        <p>Get the numbers of transactions sent from this address.</p>\n                        <pre>\n                            <code className='language-javascript line-numbers'>\n                                {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst address = '0x...';\nambrosus.service.getTransactionCount(address) // Or no parameter if you want to get the count for the private key you have provided.\n.then(console.log);`}\n                            </code>\n                        </pre>\n                    </div>\n            </div>\n            <div id='send-transaction' ref={sendTransaction} className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#send-transaction`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Send Transaction</h4>\n                    <div style={{ paddingBottom: '0' }} className='para'>\n                        <p>Signs and sends the transaction to the network</p>\n                        <pre>\n                            <code className='language-javascript line-numbers'>\n                                {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst address = '...';\nconst value = '...';\nconst data = '..';\nambrosus.service.sendTransaction(address, value, data)\n.then((receipt) => { console.log(recepit); });\n// We can also use the event emitter for more details\nambrosus.service.sendTransaction(address, value, data)\n.on('transactionHash', function(hash){\n    ...\n})\n.on('receipt', function(receipt){\n    ...\n})\n.on('confirmation', function(confirmationNumber, receipt){ ... })\n.on('error', console.error); // If a out of gas error, the second parameter is the receipt.`}\n                            </code>\n                        </pre>\n                    </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useRef, useContext } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport SVG from 'react-svg';\nimport link from '../../../../assets/svg/link.svg';\nimport Prism from 'prismjs';\nimport { AppContext } from '../../../App';\n\nexport default function () {\n    const { setHash } = useContext(AppContext);\n    const blockchain = useRef<HTMLDivElement>(null);\n    const pkPair = useRef<HTMLDivElement>(null);\n    const balance = useRef<HTMLDivElement>(null);\n    const block = useRef<HTMLDivElement>(null);\n    const latestBlock = useRef<HTMLDivElement>(null);\n    const blockAccount = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        Prism.highlightAll();\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    const onScroll = (e: any) => {\n        if (Math.abs(window.scrollY - blockchain.current!.offsetTop) <= 30) {\n            setHash('blockchain');\n        } else if (Math.abs(window.scrollY - pkPair.current!.offsetTop) <= 30) {\n            setHash('pk-pair');\n        } else if (Math.abs(window.scrollY - balance.current!.offsetTop) <= 30) {\n            setHash('balance');\n        } else if (Math.abs(window.scrollY - block.current!.offsetTop) <= 30) {\n            setHash('block');\n        } else if (Math.abs(window.scrollY - latestBlock.current!.offsetTop) <= 30) {\n            setHash('latest-block');\n        } else if (Math.abs(window.scrollY - blockAccount.current!.offsetTop) <= 30) {\n            setHash('block-account');\n        }\n    };\n\n    return (\n        <div id='blockchain' ref={blockchain}>\n            <h3>\n                <CopyToClipboard text={`${window.location.origin}/#blockchain`}>\n                    <SVG className='link' src={link} wrapper='span' />\n                </CopyToClipboard>\n                Blockchain</h3><hr />\n            <div ref={pkPair} id='pk-pair' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#pk-pair`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Generate Private key pair</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Generates an account object with private key and public key.</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK();\nconst account = ambrosus.service.getPkPair();`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={balance} id='balance' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#balance`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Balance</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Get the balance of an address at a given block.</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst address = '...';\nambrosus.service.getBalance(address)\n.then(console.log);`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={block} id='block' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#block`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Block</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Returns a block matching the block number or block hash.</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst number = 12345;\nambrosus.service.getBlock(number)\n.then(console.log);`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={latestBlock} id='latest-block' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#latest-block`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Latest Block</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Returns the latest block</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nambrosus.service.getLatestBlock(number)\n.then(console.log);`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n            <div ref={blockAccount} id='block-account' className='para'>\n                <h4>\n                    <CopyToClipboard text={`${window.location.origin}/#block-account`}>\n                        <SVG className='link' src={link} wrapper='span' />\n                    </CopyToClipboard>\n                    Get Account</h4>\n                <div style={{ paddingBottom: '0' }} className='para'>\n                    <p>Creates an account object from a private key.</p>\n                    <pre>\n                        <code className='language-javascript line-numbers'>\n                            {`import AmbrosusSDK from 'ambrosus-javascript-sdk';\nconst ambrosus = new AmbrosusSDK({\n    rpcURL: 'https://network.ambrosus-dev.com',\n    secret: '0xdfds...',\n});\nconst secret = '';\nambrosus.service.getAccount(secret) // No parameter if you want your secret key account object.\n.then(console.log);`}\n                        </code>\n                    </pre>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useRef, useContext, useEffect } from 'react';\nimport { AppContext } from '../../App';\nimport SVG from 'react-svg';\nimport './Examples.scss';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport link from '../../../assets/svg/link.svg';\nimport Assets from './Assets';\nimport Events from './Events';\nimport Transactions from './Transactions';\nimport Blockchain from './Blockchain';\n\nconst Examples = () => {\n    const {setHash} = useContext(AppContext);\n    const example = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      window.addEventListener('scroll', onScroll);\n      return () => {\n        window.removeEventListener('scroll', onScroll);\n      };\n    }, []);\n\n      const onScroll = (e: any) => {\n        e.preventDefault();\n        if (Math.abs(window.scrollY - example.current!.offsetTop) <= 30 ) {\n            setHash('example');\n        }\n      };\n\n    return (\n    <div id='example' ref={example}>\n        <h2>\n          <CopyToClipboard text={`${window.location.origin}/#example`}>\n            <SVG className='link' src={link} wrapper='span' />\n          </CopyToClipboard>\n        Example</h2>\n        <hr />\n        <Assets />\n        <Events />\n        <Transactions />\n        <Blockchain />\n    </div>);\n};\n\nexport default Examples;\n","import React, { useContext } from 'react';\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\nimport { AppContext } from '../../App';\nimport './Navigation.scss';\nimport rightArrow from '../../../assets/svg/arrow_right.svg';\nimport SVG from 'react-svg';\n\nconst Navigation = () => {\n  const value = useContext(AppContext);\n\n  const isActive = (path: string[]) => {\n    if (path.indexOf(value.hash) > -1) {\n      return 'active';\n    }\n    return '';\n  };\n\n  const onScroll = (hash: string) => (el: any) => {\n    value.setHash(hash);\n    el.scrollIntoView({ behavior: 'instant', block: 'start' });\n  };\n\n  return (\n    <div className='Navigation'>\n      <h3>Documentation</h3>\n      <ul className='data'>\n        <li className={isActive(['intro'])}>\n          <NavLink scroll={onScroll('intro')} to='/#intro'>Introduction</NavLink>\n        </li>\n        <li className={isActive(['started', 'prerequisite', 'installation', 'usage'])}>\n          <NavLink scroll={onScroll('started')} to='/#started'>Getting Started\n            <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n          </NavLink>\n          <ul className='sub-data'>\n            <li className={isActive(['prerequisite'])}>\n              <NavLink scroll={onScroll('prerequisite')} to='/#prerequisite'>Prerequisite</NavLink>\n            </li>\n            <li className={isActive(['installation'])}>\n              <NavLink scroll={onScroll('installation')} to='/#installation'>Installation</NavLink>\n            </li>\n            <li className={isActive(['usage'])}>\n              <NavLink scroll={onScroll('usage')} to='/#usage'>Usage</NavLink>\n            </li>\n          </ul>\n        </li>\n        <li className={isActive(['example', 'assets', 'get-asset', 'get-assets', 'create-asset',\n          'events', 'get-event', 'get-events', 'create-event', 'transaction', 'get-transaction',\n          'get-transaction-receipt', 'get-transaction-count', 'send-transaction',\n          'blockchain', 'pk-pair', 'balance', 'block', 'latest-block', 'block-account'])}>\n          <NavLink to='/#example' scroll={onScroll('example')}>Examples\n            <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n          </NavLink>\n          <ul className='sub-data'>\n            <li className={isActive(['assets', 'get-asset', 'get-assets', 'create-asset'])}>\n              <NavLink scroll={onScroll('assets')} to='/#assets'>Assets\n                <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n              </NavLink>\n              <ul className='sub-data'>\n                <li className={isActive(['get-asset'])}>\n                  <NavLink scroll={onScroll('get-asset')} to='/#get-asset'>Get Asset</NavLink>\n                </li>\n                <li className={isActive(['get-assets'])}>\n                  <NavLink scroll={onScroll('get-assets')} to='/#get-assets'>Get Assets</NavLink>\n                </li>\n                <li className={isActive(['create-asset'])}>\n                  <NavLink scroll={onScroll('create-asset')} to='/#create-asset'>Create Assets</NavLink>\n                </li>\n              </ul>\n            </li>\n            <li className={isActive(['events', 'get-event', 'get-events', 'create-event'])}>\n              <NavLink scroll={onScroll('events')} to='/#events'>Events\n                <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n              </NavLink>\n              <ul className='sub-data'>\n                <li className={isActive(['get-event'])}>\n                  <NavLink scroll={onScroll('get-event')} to='/#get-event'>Get Event</NavLink>\n                </li>\n                <li className={isActive(['get-events'])}>\n                  <NavLink scroll={onScroll('get-events')} to='/#get-events'>Get Events</NavLink>\n                </li>\n                <li className={isActive(['create-event'])}>\n                  <NavLink scroll={onScroll('create-event')} to='/#create-event'>Create Events</NavLink>\n                </li>\n              </ul>\n            </li>\n            <li className={isActive(['transaction', 'get-transaction', 'get-transaction-receipt', 'get-transaction-count', 'send-transaction'])}>\n              <NavLink scroll={onScroll('transaction')} to='/#transaction'>Transaction\n                <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n              </NavLink>\n              <ul className='sub-data'>\n                <li className={isActive(['get-transaction'])}>\n                  <NavLink scroll={onScroll('get-transaction')} to='/#get-transaction'>Get Transaction</NavLink>\n                </li>\n                <li className={isActive(['get-transaction-receipt'])}>\n                  <NavLink scroll={onScroll('get-transaction-receipt')} to='/#get-transaction-receipt'>Get Transaction Receipt</NavLink>\n                </li>\n                <li className={isActive(['get-transaction-count'])}>\n                  <NavLink scroll={onScroll('get-transaction-count')} to='/#get-transaction-count'>Get Transaction Count</NavLink>\n                </li>\n                <li className={isActive(['send-transaction'])}>\n                  <NavLink scroll={onScroll('send-transaction')} to='/#send-transaction'>Send Transaction</NavLink>\n                </li>\n              </ul>\n            </li>\n            <li className={isActive(['blockchain', 'pk-pair', 'balance', 'block', 'latest-block', 'block-account'])}>\n              <NavLink scroll={onScroll('blockchain')} to='/#transaction'>Blockchain\n                <SVG className='arrow-right' wrapper='span' src={rightArrow} />\n              </NavLink>\n              <ul className='sub-data'>\n                <li className={isActive(['pk-pair'])}>\n                  <NavLink scroll={onScroll('pk-pair')} to='/#pk-pair'>Private Key Pair</NavLink>\n                </li>\n                <li className={isActive(['balance'])}>\n                  <NavLink scroll={onScroll('balance')} to='/#balance'>Get Balance</NavLink>\n                </li>\n                <li className={isActive(['block'])}>\n                  <NavLink scroll={onScroll('block')} to='/#block'>Get Block</NavLink>\n                </li>\n                <li className={isActive(['latest-block'])}>\n                  <NavLink scroll={onScroll('latest-block')} to='/#latest-block'>Latest Block</NavLink>\n                </li>\n                <li className={isActive(['block-account'])}>\n                  <NavLink scroll={onScroll('block-account')} to='/#block-account'>Get Account</NavLink>\n                </li>\n              </ul>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport Navigation from '../Navigation';\nimport './Aside.scss';\n\nexport default function () {\n    return (\n        <div className='aside'>\n            <Navigation />\n        </div>\n    );\n}\n","import React from 'react';\nimport Navigation from '../Navigation';\nimport { Sidemenu } from '@ambrosus/react';\nimport './Header.scss';\n\nexport default function () {\n    return (\n        <div className='header'>\n            <Sidemenu>\n                <Navigation />\n            </Sidemenu>\n        </div>\n    );\n}\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\nimport React, { createContext, useState } from 'react';\nimport './App.scss';\nimport Introduction from './containers/Introduction';\nimport GettingStarted from './containers/GettingStarted';\nimport Example from './containers/Examples';\nimport Aside from './components/Aside';\nimport Header from './components/Header';\n\nexport interface ContextInterface {\n  hash: string;\n  setHash: (hashValue: string) => void;\n}\n// tslint:disable-next-line:no-empty\nexport const AppContext = createContext<ContextInterface>({hash: '', setHash: () => {}});\n\nconst App = () => {\n  const [hash, setHash] = useState();\n  const setHashValue = (hashValue: string) => {\n    setHash(hashValue);\n    if (history.pushState) {\n      window.history.pushState(null, '', `#${hashValue}`);\n    } else {\n        window.location.hash = hashValue;\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{hash, setHash: setHashValue}}>\n    <div className='app'>\n      <Aside />\n      <Header />\n      <div className='main'>\n        <Introduction />\n        <GettingStarted />\n        <Example />\n      </div>\n    </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// tslint:disable\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Copyright 2018 Ambrosus Inc.\n * Email: tech@ambrosus.com\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './styles/style.scss';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers';\nimport 'prismjs/plugins/line-numbers/prism-line-numbers.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n      <BrowserRouter><App /></BrowserRouter>,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}