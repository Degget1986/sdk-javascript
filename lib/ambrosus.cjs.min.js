'use strict';const handleResponse=a=>new Promise((b,c)=>{const d={status:a.status,data:null,message:JSON.parse(a.response).reason};(200===a.status||201===a.status)&&(d.data=JSON.parse(a.response),d.message='success',b(d)),c(d)}),rejectResponse=a=>({status:400,data:null,message:a}),successResponse=a=>({status:200,data:a,message:'success'});class Request{constructor(a){this._settings=a}getRequest(a){return new Promise((b,c)=>{let d=new XMLHttpRequest;d.open('GET',`${this._settings.apiEndpoint}/${a}`,!0),d.addEventListener('load',()=>{handleResponse(d).then(a=>{b(a)}).catch(a=>{c(a)})},!1),d.send()})}postRequest(a,b){return new Promise((c,d)=>{let e=new XMLHttpRequest;e.open('POST',`${this._settings.apiEndpoint}/${a}`,!0,this._settings),e.setRequestHeader('Content-type','application/json; charset=utf-8'),e.setRequestHeader('Authorization','AMB '+this._settings.secret),e.onload=()=>{handleResponse(e).then(a=>{c(a)}).catch(a=>{d(a)})},e.send(JSON.stringify(b))})}}const checkTimeStamp=a=>{let b=Math.floor(Date.now()/1e3);return a.content&&a.content.idData&&a.content.idData.timestamp?a.content.idData.timestamp:b},parseEvents=a=>a.results.reduce((a,{content:b,eventId:c})=>{const d=b.idData.timestamp,e=b.idData.createdBy;return b&&b.data&&b.data.filter(a=>(a.timestamp=d,a.author=e,a.name=a.name||a.type,a.action=a.type,a.type=a.type.substr(a.type.lastIndexOf('.')+1),a.eventId=c,'location'===a.type?void b.data.reduce((a,b)=>{'location'!==b.type&&(b.location=a)},a):a)).map(b=>{const c=-1<['info','redirection','identifiers','branding'].indexOf(b.type)?a:a.events;(!c[b.type]||c[b.type].timestamp<b.timestamp)&&(c[b.type]=b)}),a},{events:{}}),serializeParams=a=>{let b='';for(let c in a)''!=b&&(b+='&'),b+=c+'='+encodeURIComponent(a[c]);return b};class Assets{constructor(a,b){this._settings=a,b.getToken().then(a=>{this._settings.token=a}),this._request=new Request(this._settings)}getAssetById(a){return new Promise((b,c)=>{this._request.getRequest(`assets/${a}`).then(a=>b(a)).catch(a=>c(a))})}getAssets(a){return new Promise((b,c)=>{this._request.getRequest(`assets?${serializeParams(a)}`).then(a=>b(a)).catch(a=>c(a))})}createAsset(a){return new Promise((b,c)=>{this._request.postRequest('assets',a).then(a=>b(a)).catch(a=>c(a))})}}class Events{constructor(a,b){this._settings=a,b.getToken().then(a=>{this._settings.token=a}),this._request=new Request(this._settings)}getEventById(a){return new Promise((b,c)=>{this._request.getRequest(`events/${a}`).then(a=>b(a)).catch(a=>c(a))})}getEvents(a){return new Promise((b,c)=>{this._request.getRequest(`events?${serializeParams(a)}`).then(a=>b(a)).catch(a=>c(a))})}createEvent(a,b){return new Promise((c,d)=>{this._request.postRequest(`assets/${a}/events`,b).then(a=>c(a)).catch(a=>d(a))})}}class Auth{constructor(a){if(this._settings=a,!this._settings||!this._settings.secret||!this._settings.address)return console.error('Secret key and account address are required in order to generate an access token.'),!1}getToken(){return new Promise(a=>{if(this._settings.token)a(this._settings.token);else{let b=new XMLHttpRequest;b.open('POST',`${this._settings.apiEndpoint}/token`,!0,this._settings),b.onload=()=>{this._settings.token=JSON.parse(b.responseText),a(this._settings.token)},b.send(JSON.stringify({validUntil:16e8}))}})}}class AmbrosusSDK{constructor(a){for(const b in this._settings={apiEndpoint:'https://gateway-test.ambrosus.com'},this.events={},this.empty=[],a)a.hasOwnProperty(b)&&(this._settings[b]=a[b]);this._auth=new Auth(this._settings),this._assets=new Assets(this._settings,this._auth),this._events=new Events(this._settings,this._auth)}getAssetById(a){return new Promise((b,c)=>a?this._assets.getAssetById(a).then(a=>b(a)).catch(a=>c(a)):c(rejectResponse('Asset ID is missing.')))}getEventById(a){return new Promise((b,c)=>a?this._events.getEventById(a).then(a=>b(a)).catch(a=>c(a)):c(rejectResponse('Event ID is missing.')))}getAssets(a={}){return new Promise((b,c)=>this._assets.getAssets(a).then(a=>b(a)).catch(a=>c(a)))}getEvents(a){return new Promise((b,c)=>this._events.getEvents(a).then(a=>b(a)).catch(a=>c(a)))}createAsset(a={}){return new Promise((b,c)=>{let d={content:{idData:{createdBy:this._settings.address,timestamp:checkTimeStamp(a),sequenceNumber:0}}};return a.data&&(d.data=a.data),this._assets.createAsset(d).then(c=>{if(1<=a.length){let d=[];for(let b=0;b<a.length;b++)d[b]=new Promise(d=>this.createEvent(c.data.assetId,a[b]).then(a=>{d(a)}));this.emit('asset:created'),b(c)}else return this.emit('asset:created'),void b(c)}).catch(a=>c(a))})}createEvent(a,b){return new Promise((c,d)=>{if(!a)return d(rejectResponse('Asset ID is missing.'));if(!b)return d(rejectResponse('Event data is missing.'));let e={content:{idData:{assetId:a,timestamp:checkTimeStamp(b),accessLevel:0,createdBy:this._settings.address}}};if(b.content&&b.content.data)e.content.data=b.content.data;else return d(rejectResponse('Invalid data: No content found at content.data.'));return this._events.createEvent(a,e).then(a=>{this.emit('event:created'),c(a)}).catch(a=>d(a))})}parseEvents(a){return new Promise((b,c)=>a&&a.results?b(successResponse(parseEvents(a))):c(rejectResponse('Results array is missing.')))}on(a,b,c){return(this.events[a]=this.events[a]||[]).push([b,c]),this}off(a,b){a||(this.events={});let c=this.events[a]||this.empty,d=c.length=b?c.length:0;for(;d--;)b===c[d][0]&&c.splice(d,1);return this}emit(a){let b,c=this.events[a]||this.empty,d=0<c.length?c.slice(0,c.length):c,e=0;for(;b=d[e++];)b[0].apply(b[1],this.empty.slice.call(arguments,1));return this}}module.exports=AmbrosusSDK;
